(in-package :cl-user)

(load #P"greeter.lisp")
(defpackage greeter-test
  (:use :cl
	:prove
	:com.aragaer.pa-brain))

(in-package #:greeter-test)
(load #P"test-utils.lisp")
(setf *thought-class-under-test* 'greeter)

(plan nil)
(verify-modifiers-for "hello" (acons :hello t nil))
(verify-modifiers-for "goodbye" (acons :hello t nil))
(let ((event (make-event nil nil nil))
      (a-greeter (make-instance 'greeter)))
  (process a-greeter event)
  (is (getf event :response) nil))

(let ((event (make-event-from-text "hello"))
      (a-greeter (make-instance 'greeter)))
  (react a-greeter event)
  (process a-greeter event)
  (verify-modifiers-for "hello" (acons :seen-already t nil) a-greeter))

(let ((event (make-event-from-text "hello"))
      (a-greeter (make-instance 'greeter)))
  (react a-greeter event)
  (process a-greeter event)
  (verify-modifiers-for "goodbye" nil a-greeter))

(let ((event (make-event-from-text "hello"))
      (a-greeter (make-instance 'greeter)))
  (setf (getf event :modifiers) (acons :hello t nil))
  (process a-greeter event)
  (is (getf event :response) '("hello")))

(let ((event (make-event-from-text "hello"))
      (a-greeter (make-instance 'greeter)))
  (setf (getf event :modifiers) (acons :seen-already t nil))
  (process a-greeter event)
  (is (getf event :response) '("seen already")))

(let ((event1 (make-event-from-text "hello" (acons :hello t nil)))
      (event2 (make-event-from-text "hello" (acons :seen-already t nil)))
      (a-greeter (make-instance 'greeter)))
  (setf (getf event1 :response) '("yo"))
  (setf (getf event2 :response) '("yo"))
  (process a-greeter event1)
  (process a-greeter event2)
  (is (getf event1 :response) '("hello" "yo"))
  (is (getf event2 :response) '("seen already" "yo")))

(let ((event1 (make-event-from-text "hello"))
      (event2 (make-event nil nil nil))
      (event3 (make-event-from-text "hello"))
      (a-greeter (make-instance 'greeter)))
  (setf (getf event2 :event) "new day")
  (loop for event in (list event1 event2 event3)
	do (react a-greeter event)
	do (process a-greeter event))
  (is (getf event3 :modifiers) (acons :hello t nil)))

(let ((event1 (make-event-from-text "hello"))
      (event2 (make-event-from-text "hello"))
      (event3 (make-event nil nil nil))
      (event4 (make-event-from-text "hello"))
      (a-greeter (make-instance 'greeter)))
  (setf (getf event3 :event) "new day")
  (react a-greeter event1)
  (process a-greeter event1)
  (let ((serialized (conspack:encode a-greeter)))
    (setf a-greeter (conspack:decode serialized)))
  (loop for event in (list event2 event3 event4)
	do (react a-greeter event)
	do (process a-greeter event))
  (is (getf event2 :modifiers) (acons :seen-already t nil))
  (is (getf event4 :modifiers) (acons :hello t nil)))

(let ((event (build-event :event "cron go to bed"))
      (a-greeter (make-instance 'greeter)))
  (setf (getf event :modifiers) (acons :scheduled "go to bed" nil))
  (react a-greeter event)
  (setf (getf event :response) '("go to bed"))
  (process a-greeter event)
  (is (getf event :response) '("hello" "go to bed")))

(finalize)
